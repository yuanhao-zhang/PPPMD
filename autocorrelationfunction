from numpy import *
import sys
import math
import fileinput
#from scipy.optimize import curve_fit
#import matplotlib.pyplot as plt

nc = 48
clength = 88
clpmma = 14
clps =74
nconf = 20
blocklength = 280
blockint = 2
overallf = 300
nonzerob = int((overallf-nconf-blocklength)/blockint)
filename = "3_ht.lammpstrj"

def MSD(n_chain, chainlength, nconf):
    rs = open('tmp.data', 'w')
    tyid = [0] * 300001
    position_x = [0] * 300001
    position_y = [0] * 300001
    position_z = [0] * 300001
    position_zr = [0] * 300001
    delt_x0 = zeros((200,600))
    delt_y0 = zeros((200,600))
    delt_z0 = zeros((200,600))
    delt_x = zeros((200))
    delt_y = zeros((200))
    delt_z = zeros((200))
    res=zeros((200))
    st=zeros((200))
    inde = 1

    step = 0
    c=0
    tmp=zeros((1000))
    tmp2=zeros((1000))
    acf=zeros((1000,1000))

    n_poly = 0
    mod=1
    k=0
    xmin=xmax=ymax=ymin=zmax=zmin=0
    fp=fileinput.input(filename)
    while True:
        Line=fp.readline()
        if Line=='':
            break
        k=k+1       
        if mod==1:              
            if 'ITEM: NUMBER OF ATOMS' in Line:
                Line=fp.readline()
                Natom=int(Line)                         
            if 'ITEM: BOX BOUNDS' in Line:
                Line=fp.readline()
                [xmin, xmax] = map(float,Line.split())
                Line=fp.readline()                   
                [ymin, ymax] = map(float,Line.split())
                Line=fp.readline()
                [zmin, zmax] = map(float,Line.split())                    
            if "ITEM: ATOMS" in Line:                   
                step = step + 1
                mod=2   
                Line=fp.readline()  
        if "ITEM: TIMESTEP" in Line:
            mod=3                           
        if mod==2:                           
            parts = Line.split()
            #print(Line)
            atom_id, mol, atom_type, charge, xs, ys, zs, x1, y1, z1 = map(float, parts)
            x = xs * (xmax-xmin) + x1 * (xmax-xmin)
            y = ys * (ymax-ymin) + y1 * (ymax-ymin)
            zr = zs * (zmax-zmin) + z1 * (zmax-zmin)
            z = zs
            tyid[int(atom_id)] = int(atom_type)

            if (step >= nconf) and (atom_type ==3 or 2):
                position_x[int(atom_id)] = x
                position_y[int(atom_id)] = y
                position_z[int(atom_id)] = z
                position_zr[int(atom_id)] = zr
                n_poly = n_poly + 1
       
        if mod==3:
            mod=1
            if step >= nconf:
                c=c+1
                if c==blockint+1:
                    print(step)
                    inde =inde+1
                    c=1                   
                tmpc=nconf+(inde-1)*blockint
                for cid in range(1, n_chain + 1):
                    begin = int((cid - 1) * chainlength + clpmma +1)
                    end   = int((cid) * chainlength)
                    
                    if step ==tmpc:
                        delt_x0[cid][inde] = position_x[begin] - position_x[end]
                        delt_y0[cid][inde] = position_y[begin] - position_y[end]
                        delt_z0[cid][inde] = position_zr[begin] - position_zr[end]
                    delt_x[cid] = position_x[begin] - position_x[end]
                    delt_y[cid] = position_y[begin] - position_y[end]
                    delt_z[cid] = position_zr[begin] - position_zr[end]
                for j in range(1,inde+1):
                    judge = nconf+(j-1)*blockint
                    if step >judge + blocklength:
                        continue
                    for cid1 in range(1,n_chain+1):
                        ac1=[delt_x0[cid1][j],   delt_y0[cid1][j],   delt_z0[cid1][j]]
                        ac2=[delt_x[cid1],   delt_y[cid1],   delt_z[cid1] ]
                        tmp[cid1]=dot(ac1,ac2)
                        tmp2[cid1]=dot(ac1,ac1)
                    acf[step-nconf-(j-1)*blockint+1][j]=mean(tmp[tmp!=0])/mean(tmp2[tmp2!=0])    
                    #acf[step-nconf-(j-1)*blockint+1][j]=mean(tmp[tmp!=0])       
                print("doing step: %3i" %step)
#    for i in range(1,blocklength+1):
#        res[i]=mean(acf[i,1:nonzerob])
#        st[i] =std(acf[i,1:nonzerob])
#    for i in range(1,blocklength+1):
#        rs.write("%5.4f %5.4f \n"% (res[i],st[i]))
    for i in range(1,blocklength+1):
        for j in range(1,inde+1):
            rs.write("%5.4f, "% (acf[i][j]))
            if j ==inde:
                rs.write('\n')

MSD(nc, clength, nconf)
  


    
